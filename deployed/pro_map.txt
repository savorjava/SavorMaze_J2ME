com.savorjava.game.Action -> d:
    com.savorjava.game.CoreCanvas canvas -> a
    boolean acting -> b
    void interrupt(int) -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
com.savorjava.game.CoreCanvas -> b:
    com.savorjava.game.Action initialAction -> c
    com.savorjava.game.Action startAction -> d
    com.savorjava.game.Action runAction -> e
    com.savorjava.game.Action endAction -> f
    com.savorjava.game.Action currentAction -> g
    java.lang.Thread initialThread -> h
    java.lang.Thread startThread -> i
    java.lang.Thread runThread -> j
    java.lang.Thread endThread -> k
    int gameStatus -> l
    int sleepTime -> a
    boolean statusChanged -> m
    java.util.Hashtable attributes -> n
    javax.microedition.lcdui.Image bufferedImage -> o
    javax.microedition.lcdui.Graphics bufferedGraphics -> b
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void run() -> run
    void regInitialAction(com.savorjava.game.Action) -> a
    void regStartAction(com.savorjava.game.Action) -> b
    void regRunAction(com.savorjava.game.Action) -> c
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void setGameStatus(int) -> a
    void setAttribute(java.lang.String,java.lang.Object) -> a
    java.lang.Object getAttribute(java.lang.String) -> a
com.savorjava.game.Utility -> e:
    long min(long,long) -> a
com.savorjava.game.savormaze.GameRunner -> com.savorjava.game.savormaze.GameRunner:
    javax.microedition.midlet.MIDlet midlet -> a
    com.savorjava.game.CoreCanvas canvas -> d
    java.lang.Thread core -> e
    java.lang.String ROBOTRUN -> b
    java.lang.String LEVEL -> c
    void startApp() -> startApp
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
com.savorjava.game.savormaze.MazeInitialAction -> f:
    void run() -> run
    void perform(javax.microedition.lcdui.Graphics) -> a
com.savorjava.game.savormaze.MazeRunAction -> c:
    byte status -> c
    short grid -> d
    short maxGrid -> e
    byte gridSize -> f
    java.util.Random random -> g
    boolean runingFlag -> h
    boolean robotRun -> i
    short level -> j
    javax.microedition.lcdui.Command nextCommand -> k
    javax.microedition.lcdui.Command exitCommand -> l
    int[][] rooms -> m
    short[] hacker -> n
    short[] robot -> o
    java.util.Stack robotMemory -> p
    java.util.Stack roomsNeedDraw -> q
    void initialRooms() -> a
    void perform(javax.microedition.lcdui.Graphics) -> a
    void drawRoomsNeedDraw(javax.microedition.lcdui.Graphics) -> b
    void drawMaze(javax.microedition.lcdui.Graphics) -> c
    void drawRoom(javax.microedition.lcdui.Graphics,int,int,int) -> a
    int[] getRandomNeighbor(int[][],int,int) -> a
    void run() -> run
    void robotRun() -> b
    void interrupt(int) -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
com.savorjava.game.savormaze.MazeStartAction -> a:
    java.lang.String[][] menu -> c
    java.lang.String helpInfo -> d
    short currentMenu -> e
    short[] currentChoice -> f
    int hitColor -> g
    int unHitColor -> h
    int xSize -> i
    int ySize -> j
    int y1 -> k
    int y2 -> l
    short tieHeight -> m
    boolean drawTie -> n
    javax.microedition.lcdui.Font font -> o
    javax.microedition.lcdui.Command selectCommand -> p
    void run() -> run
    void perform(javax.microedition.lcdui.Graphics) -> a
    void interrupt(int) -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
